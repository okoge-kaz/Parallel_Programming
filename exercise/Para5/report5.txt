--------------------------

学籍番号 : 20B30790
氏名 : 藤井一喜

--------------------------

回答1 :
1.1) 空欄に入る数は以下のとおり

A： 16777216 (= 256 ** 3)

B: 64 (= 4 ** 3)

C: 256

理由 :

1.2)
並列化で問題となるStreamの処理の番号

1番目のStream処理


1.3)単純に並列化したのでは結果が異なる原因

averageRGBArray.get(label).add(inImage[n]); の箇所において add により競合が生じる恐れがあるため。
より詳細に述べると、averageRGBArray のデータはここ以外でも使用されており、 add のような参照だけでない破壊的処理を行う場合は、同期をとる工夫をしなkればスレッドセーフは実現できないため、結果が異なってしまう。


1.4)並列化に対応するために行った変更点







回答2 :
2.1)
出力される時間の意味

while ループは count == 100 となる。すなわち100単位時間が経過するとMain11を終了する。そのため、出力される時間は、threadが開始されてから終了するまでの時間である。

達成された高速化の数値的説明

SINGLE: 61304 msec
PARALLEL: 18101 msec

3分の１未満に時間が短縮されている。これは、並列化により処理が速くなるためである。


計測時間の信頼性を向上させるために行った工夫、計測で注意した点

条件をそろえるためにできるだけ他のアプリケーションを起動しない状態で計測を行なった。また、複数回計測を行いその平均値を採用した。


2.2)
衝突判定部分の高速化についてのvisualvmを使用した調査方法の説明

visual VM のSampler - CPU samples Thread-3 para.graphic.shape.CollisionCheckParallel2.checkに着目すると、"SINGLE"を渡した際は、Total time: 43876 msecとなるが、"PARALLEL"を渡した際は、Total time: 2771 msecとなる。


調査により判明した衝突判定部分の高速化前後の処理速度の比率

前述のように

SINGLE: 43876 msec
PARALLEL: 2771 msec

であるので、衝突判定部分は並列により約16倍速くなったといえる。


2.3)
発見された改善対象のコード部分

collisionChecker により、ピンク色の箇所と衝突していることがわかった箇所を removeする処理の部分

改良方針

ShapeManager の removeメソッドの synchronized の位置を変更する。
既存のコードでは、 id が一致しない場合にも synchronized メソッドであることから排他処理が入ってしまっているので、これを idが一致した場合の時だけ synchronized するように変更する。



2.4)2.3で行った改良部分の改良前後の処理時間について

処理時間の定義

visual VM における CPU samples Thread-3 para.graphic.shape.ShapeManager.remove() の Total timeを処理時間と定義する。


改良前と比べ改良後の処理時間は 95 ％となった


回答3 :
3.1)ゲーム性を高めるための実装
得点ルールの定義




得点計算のコード部分について




得点表示のためのコード部分について




ゲームの終了条件の定義




ゲームの終了判定のコード部分について





スタートボタンを押した際の新たな初期化処理について






ゲームの難易度の方針





数値選択とゲーム難易度についての実装部分について






3.2)さらなるゲーム性を高めるための実装
実装方針




実装箇所







今回の課題で特に学べたと感じたこと

