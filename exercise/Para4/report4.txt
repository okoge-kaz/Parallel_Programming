--------------------------

学籍番号 : 20B30790
氏名 : 藤井一喜

--------------------------

回答1 :
1.1) 途中結果が表示されなかった理由の説明

Executor2において writeStateメソッド, operationメソッドを呼び出しているスレッドは以下のようになっている。

operation: JavaFX Application Thread
writeSate: JavaFX Application Thread

ここで、期待したような動作をしない原因となっているのは Platform.runLaterメソッド内のlabel.setTextもJavaFX Application Threadで実行されているため、operationによる数式の解釈と演算結果が定まるまで、同一スレッド内の実行ができないためである。


1.2) 改良方針の説明


setText スレッドを別のスレッドに切り替えることで、演算結果が逐次表示されるようになるので、operationメソッド内で新しいスレッドを生成する。この際、題意を満たすためには、すでに生成されているスレッドを破棄して、新しいスレッドを生成するようにしなければならないため、 lastThread != null という条件判定を行う。過去のスレッドが存在していた場合は join によりこれを修了させる。



1.3) 発生したエラー文は次のとおり

setText Thread: JavaFX Application Thread
Exception in thread "Thread-4" java.lang.IllegalStateException: Not on FX application thread; currentThread = Thread-4
at javafx.graphics@18.0.1/com.sun.javafx.tk.Toolkit.checkFxUserThread(Toolkit.java:297)
at javafx.graphics@18.0.1/com.sun.javafx.tk.quantum.QuantumToolkit.checkFxUserThread(QuantumToolkit.java:458)
at javafx.graphics@18.0.1/javafx.scene.Parent$3.onProposedChange(Parent.java:474)
at javafx.base@18.0.1/com.sun.javafx.collections.VetoableListDecorator.setAll(VetoableListDecorator.java:113)
at javafx.base@18.0.1/com.sun.javafx.collections.VetoableListDecorator.setAll(VetoableListDecorator.java:108)
at javafx.controls@18.0.1/javafx.scene.control.skin.LabeledSkinBase.updateChildren(LabeledSkinBase.java:282)
at javafx.controls@18.0.1/javafx.scene.control.skin.LabeledSkinBase.lambda$new$11(LabeledSkinBase.java:219)
at javafx.controls@18.0.1/com.sun.javafx.scene.control.LambdaMultiplePropertyChangeListenerHandler.lambda$new$1(LambdaMultiplePropertyChangeListenerHandler.java:88)
at javafx.base@18.0.1/javafx.beans.value.WeakChangeListener.changed(WeakChangeListener.java:86)
at javafx.base@18.0.1/com.sun.javafx.binding.ExpressionHelper$SingleChange.fireValueChangedEvent(ExpressionHelper.java:181)
at javafx.base@18.0.1/com.sun.javafx.binding.ExpressionHelper.fireValueChangedEvent(ExpressionHelper.java:80)
at javafx.base@18.0.1/javafx.beans.property.StringPropertyBase.fireValueChangedEvent(StringPropertyBase.java:104)
at javafx.base@18.0.1/javafx.beans.property.StringPropertyBase.markInvalid(StringPropertyBase.java:111)
at javafx.base@18.0.1/javafx.beans.property.StringPropertyBase.set(StringPropertyBase.java:145)
at javafx.base@18.0.1/javafx.beans.property.StringPropertyBase.set(StringPropertyBase.java:50)
at javafx.base@18.0.1/javafx.beans.property.StringProperty.setValue(StringProperty.java:71)
at javafx.controls@18.0.1/javafx.scene.control.Labeled.setText(Labeled.java:147)
at para.calc.Executor2$MyThread.run(Executor2.java:61)



runLater()の処理内容について

任意のスレッドから JavaFX Application Thread に対して runLater() 内部に書かれた処理を転送して、JavaFX Application Thread に実行させる。


runLater()がjavafxに用意されている理由

描画処理と、描画に必要な処理（今回は数式の解釈処理 ）の２つ以上のスレッドが存在する際に、JavaFX Application Threadでないスレッドの特定の動作の後に、JavaFX Application Threadに対して処理を依頼したくなることが想定される。しかし、 runLater のような仕組みがないと 共通の変数等をフラグにするなど、少々面倒な処理を挟まないと別スレッドに対して、ある処理が完了していてかつ、まだそのスレッドは存続させたいような場合に上記のような動作を実現する手段がない。そのため runLater メソッドが用意されている。



回答2 :
2.2)2つのスレッドのそれぞれの処理内容について
1つ目のスレッド

JavaFX Application Thread

GUIの描画処理を行う。

2つ目のスレッド

Thread 3

反復サーバーとしてlocalhost:30000を監視し、入力を読み込み、命令を解釈し、描画に必要な情報を更新する。


2.3)同期についての考えられている配慮

不十分である


不十分であると考える場合の問題となる具体的状況

final Target target については不変性があるため、スレッド間で共有される際に問題は生じないが、shapeManagerArray についてはshapeManagerArray[i] の中身のオブジェクトである OrderedShapeManager については不変性が存在せず、スレッド間で共有される際にvolatileがついていないことより最新の値である保証が存在しないため、古いShapeManagerを参照してしまう可能性がある。



2.4)並行サーバを実現するにあたり工夫した点
各クライアントからのデータの表示位置の割り振りについてどのように実現したかなど





回答3 :
3.1)改造方針、スレッドの役割分担についての説明






回答4 :
4.1)
PrintStreamでの例外発生を確認する方法





例外処理がPrintStreamと他のStreamとで異なる理由




4.2)
受信機能の追加について、工夫した点があれば記述






今回の課題で特に学べたと感じたこと

