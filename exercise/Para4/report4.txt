--------------------------

学籍番号 : 20B30790
氏名 : 藤井一喜

--------------------------

回答1 :
1.1) 途中結果が表示されなかった理由の説明

Executor2において writeStateメソッド, operationメソッドを呼び出しているスレッドは以下のようになっている。

operation: JavaFX Application Thread
writeSate: JavaFX Application Thread

ここで、期待したような動作をしない原因となっているのは Platform.runLaterメソッド内のlabel.setTextもJavaFX Application Threadで実行されているため、operationによる数式の解釈と演算結果が定まるまで、同一スレッド内の実行ができないためである。


1.2) 改良方針の説明


setText スレッドを別のスレッドに切り替えることで、演算結果が逐次表示されるようになるので、operationメソッド内で新しいスレッドを生成する。この際、題意を満たすためには、すでに生成されているスレッドを破棄して、新しいスレッドを生成するようにしなければならないため、 lastThread != null という条件判定を行う。過去のスレッドが存在していた場合は join によりこれを修了させる。



1.3) 発生したエラー文は次のとおり





runLater()の処理内容について




runLater()がjavafxに用意されている理由





回答2 :
2.2)2つのスレッドのそれぞれの処理内容について
1つ目のスレッド



2つ目のスレッド



2.3)同期についての考えられている配慮

配慮は十分である　・　不十分である

十分であると考える場合のその理由





不十分であると考える場合の問題となる具体的状況






2.4)並行サーバを実現するにあたり工夫した点
各クライアントからのデータの表示位置の割り振りについてどのように実現したかなど





回答3 :
3.1)改造方針、スレッドの役割分担についての説明






回答4 :
4.1)
PrintStreamでの例外発生を確認する方法





例外処理がPrintStreamと他のStreamとで異なる理由




4.2)
受信機能の追加について、工夫した点があれば記述






今回の課題で特に学べたと感じたこと

