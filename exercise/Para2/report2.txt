--------------------------

学籍番号 : 20B30790
氏名 : 藤井一喜

--------------------------

回答1.2 : イベントハンドラを登録したオブジェクトは次のとおり

以下のように root オブジェクトにイベントハンドラを設定した。

```
    root.setOnKeyTyped(event -> {
      String inputKey = event.getCharacter();
      if (inputKey.equals("=")) {
        outputLabel.setText(executor.operation(stringBuffer.toString()));
        stringBuffer.setLength(0);
        inputLabel.setText("");
      } else if (inputKey.equals("<")) {
        stringBuffer.deleteCharAt(stringBuffer.length() - 1);
        inputLabel.setText(stringBuffer.toString());
      } else {
        stringBuffer.append(inputKey);
        inputLabel.setText(stringBuffer.toString());
      }
    });
```



イベントハンドラを上のように登録した理由は以下のとおり


理由としては、ユーザーとしてはどこのオブジェクトにフォーカスがあってもキーボードに入力をすれば電卓による計算ができることを望んでいると考えたためである。



回答4 : package para.graphic.parserの動作の説明

全体説明:

    MainParser はinterface MetaParserを継承して実装されている。
    MainParserは Target target, ShapeManager smの２つを引数として受け取り、privateなメンバ変数としてこれを保持する。
    また、keyがStringでvalueがMetaParser型である HashMap<String, MetaParser> をprotectedなメンバ変数として持つ。
    そして、このHashMapに 

    key: "shape",  value: new ShapeManagerParser(shapemanager)
    key: "target", value: new TargetParser(target, shapemanager)
    key: "reset",  value: new ResetParser()

    を追加する。

    ResetParserは、MainParserの内部クラスとして定義されており、保持しているデータをクリアする役割を担っている。
    clear()メソッドはShapeManagerのメソッドであり、ShapeManagerクラスのメンバ変数 AbstractCollection<Shape> data をclearする働きをしている。

    ShapeManagerParserもMetaParserを継承して実装されており、コンストラクタの引数であるShapeManager型のsmを、privateなメンバ変数として保持する。またprivateメンバ変数としてHashMap<String, MetaParser> 型のhashMapを持ち、Circle, Image, Rectangle, Triangleなど解釈することができる形をkeyに、そして対応するそれぞれのParserをvalueとして追加している。

    TargetParserもMetaParserを継承して実装されている。ShapeManagerParserと異なるのは、引数としてTarget tgtをとることであり、これによりdraw, flush, clearの各機能の対象となるものを覚えておくことが可能となっている。

    実際の処理が行われるのは、

    while (true) {
          s = new Scanner(data);
          mp.parse(s);
        }
    の箇所の、mp.parse(s)の部分である。
    読み込まれたString型のデータはScannerによって取得され、MetaParserのparseメソッドに渡される。
    Scannerのnext()メソッドを使って文字列を1つずつ取得し、取得したkeyに対応するParserがMetaParser mpに代入され、対応するParserのparseメソッドを呼び出す。

    以上の方法で解析を行なっているが、dataの改行までの文字列のうち最初のshape, target, resetの文字により、ShapeParser, TargetParser, ResetParserのどれが 変数 mp に代入されるかが決められる。

    shapeの場合は、次の数字は id であり、その次の文字列によって Circle, Image, Rectangle, Triangle のどれが ShapeParser spに代入されるかを決めるキーであり、それ以降は座標、色を指定するものである。

    target の場合は、その次の文字が draw, flush, clearのどれなのかで DrawParser, FlushParser, ClearParserのどれが MetaParser mpに代入されるかが決められる。

dataを用いた説明
    まず、Scannerによって渡される最初の文字列であるshapeをみて、MainParserはHashMapのkeyに"shape"を指定してShapeManagerParserを変数mpに代入する。そしてnext()により次の文字列を取得する。0が取得されるが、idとして解釈される。そして次のCircleを受けとり、keyとして"Circle"が指定されるので、CircleParserが変数spに代入される。Scanner sとint idを引数として呼び出されたCircleParserのparseメソッドは。、10 10 40 を解釈し、それぞれ x, y, rに代入する。さらに Attributeというpatternを検出し、attrにColor 100 40 60 Fill trueという情報を格納する。こうして得られた情報をCircleクラスに渡すことで、Circleを生成する。

    次に、targetというキーワードを読む。これにより、次はHashMapよりTargetParserを変数mpに代入される。TargetParserは、引数としてTarget tgtとShapeManager smを受けとる。このShapeManagerは、先にCircleを生成したデータを保持しており、これを用いて次の文字列である draw によって決定される動作を実現する。 draw をkeyとするのは DrawParserであるため、DrawParserがmpに代入される。呼び出されるのは、target.draw(shapemanager)であり、対象に保持している図形を描画する。

    target flushの場合は、drawをflushに変えただけで同様である。

if-else文を並べた実装方法と比べた拡張性に関する利点はつぎのとおり

    if else文であると、これだけ多くの分岐を実現するためにはネストが深くなり、拡張性が低くなるという欠点がある。
    さらに、同一の処理を一定程度関数などとして括り出すことも可能ではあるが、interfaceを使って抽象化を行うことなどができない分、同一もしくは表示に似通った処理を書くことが避けられない。

    対して、オブジェクト指向的に書くことで、ポリモーフィズムの特性を生かすことで、少ないコード量で異なる動作をする処理を書くことができる。




回答5 : para.graphic.parserパッケージの各クラスのアクセス修飾を次のようにした
AttributeParser       public -> 無修飾
CircleParser          public -> 無修飾
ImageParser           public -> 無修飾
MainParser            public -> public
MetaParser            public -> 無修飾
RectangleParser       public -> 無修飾
ShapeManagerParser    public -> 無修飾
ShapeParser           public -> 無修飾
TargetParser          public -> 無修飾

上記のようにアクセス修飾をした理由は次のとおり

アクセス修飾子は、public > protected > 無修飾 > private の順で制約が厳しくなる。
カプセル化の観点から、できるだけ外部からアクセスできないようにするために、MainParser以外はパッケージ外からアクセスされることがないことを考えると 無修飾 にすることで、現在のクラスと同じパッケージ内のクラスからのアクセスが可能となる状態にしておくことが最も望ましいと考えたため。




回答6 : para.graphic.parser.ImageParserの仕組みの説明


まずコンストラクタは、privateなメンバ変数であるbisdataにImageの最大幅と最大高さに比例する大きさのバイト配列を格納する。
また、bisにbisdataをByteArrayInputStreamに渡して、bisに格納されたバイト配列を読み込むためのInputStreamを生成する。
decoderはBase64によりエンコードされた文字列をデコードするためのDecoderである。

scanImageはScanner sを引数に取り、scanImageメソッド内で例外が発生した場合はIOExceptionをスローするメソッドである。
Scannerで読み取ったsからdecodeするときの単位であるパターンにマッチする箇所を抜き出し、それを System.arraycopy niyori
bisdataにコピーしていく。最終的にはその結果がbisに格納されているので、decoderに渡してデコードされたバイト配列を取得し、それをImageIOのreadメソッドに渡してImageオブジェクトを生成する。


parseはInterface Shapeから継承した抽象メソッドparseをOverrideしている。対応する文字列は shape 15 Image 180 140\n のような形のものを、読み取り 座標x, yに 180, 140を代入し、scanImageを呼び出し、scanImageメソッド内で例外が発生しなかった場合には、imgに結果のImageオブジェクトを代入する。そして、さらに Attributeがあるかどうかを読む。 Attributeは最初はnullが代入されているが、Attributeがある場合は、AttributeParserを呼び出し、AttributeParserのparseメソッドを呼び出す。これにより得られた情報から Image オブジェクトに属性を設定し new Imageにより新しいImageオブジェクトを生成する。



工夫した点や感想：

200番台のオブジェクト指向プログミングで学んだことのとても良い復習になった。
講義外でコードを書く際にも、条件分岐ではなくポリモーフィズムをうまく使ってみることを意識するべきであると感じた。
