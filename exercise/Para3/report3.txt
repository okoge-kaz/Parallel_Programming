--------------------------

学籍番号 : 20B30790
氏名 : 藤井一喜

--------------------------

回答1 :
1.1) OrderedShapeManagerの実装についての説明
利用したクラスについてや、最小限の実装行で済ませる工夫などを説明して下さい。

親クラスのShapeManagerにて dataが内部的にidでsortされた状態を保持することを実現したいため、AbstractCollection型の派生クラスであるTreeSetを用いてsortを実現している。その際、コンストラクタ public ShapeManager() { data = new ArrayList<Shape>(); } に着目して、superによりこれを new TreeSet<Shape>() に変更することで目的を最低限の実装行で実現している。

また、sortの際にComparatorが必要であるため、これを @Overrideを用いて id sortができるように実装している。



1.2)
空欄Aに入る語は：カプセル化
空欄Bに入る語は： モニタ




回答２ :
2.1) para.Main05のメンバ変数valueに直接関連した処理を行うスレッド名と
その役割はそれぞれ次のとおり

スレッド名   | 役割
---------------------------------

JavaFX Application Thread | JavaFX Applicationのstart, stopを担当する。valueに関係する処理としては、sliderの値を監視して、変化した場合はaddListenerが発火することで、valueの値を変更する。
thread-4 | valueを受け取り、指定の座標にモグラを描画する役割を担っている。valueの値によりモグラのサイズが変更される。


2.2)
ユーザ視点でのプログラムの不具合

sliderを使ってvalueの値を変えても、volatile修飾子がついていないために、変更が反映されないor遅れて反映されることが起こり得る。


不具合の原因についての講義で説明されたプログラムを処理する仕組みに基づいた説明

原因は、スレッドはvolatile修飾子がついていない共有変数について作業用のコピーをアクセス速度向上のためにとることがあり、値の変化を別スレッドが感知できないために、速やかな値の反映が行われないことによる。


回答3 :
3.1)
配布されたpara.Main06による仕様のように動かない挙動の説明


2つの窓が存在せずdecrementとincrementの２つが１つの窓に重なっているような挙動となっている。
自分の環境では、incrementの上にdecrementが重なっているような見た目になっており、数字が重なって表示されるように見えることもある。
それぞれをマウス等で移動し、重ならないようにしても、数値がincrement, decrementされているようには見えない状態になっている。
より詳しく表現するならば、各桁が独自に動いているような挙動になっている。



3.2)
つぎのどちらかの行を消して回答せよ
メソッドduplicate()は deep copy である

スレッドセーフであると考える場合、その理由の説明

duplicateの実装をみると Para3/src/para/graphic/shape/ShapeManager.java内に実装されている、duplicate()メソッドがスレッドセーフの要件を満たしていると考えられるからである。
まず、duplicate()メソッドは、synchronized修飾子を付けており、共有変数における同期が取られる状態になっている。これは、ShapeManagerのフィールド dataには finalがついているが、再代入の禁止が行われているのみで内部の値が変更さらないという保証がprimitive型ではない参照型であることから存在しないためである。

以上により、共有変数である dataを安全に共有することができる。これにより、ShapeManager sm1のdataの値を新たに作成した変数 ShapeManager retのフィールド dataに代入することでコピーすることに成功している。この動作は、コピー元と独立にデータを扱えるようにしており、ポインターのような挙動とは異なることより、deep copyが実現されているといえる。

これにより、Thread ts1,とts2 の２つのスレッド間では sm1, sm2の間に共有する変数は存在せず、（非共有）スレッドセーフであるといえる。



回答4 :
4.1)
２つのスレッド
１つ目のスレッドとその役割は次のとおり




２つ目のスレッドとその役割は次のとおり




4.2)
para.game.GameFrameのメンバ変数xyについてsynchronizedメソッドによる同
期を行わなかった場合に生じる不正確なデータの処理の例は次のとおり





volatile修飾では不十分であることの理由






4.3)
para.game.GameFrameのメンバ変数leftonやrightonにvolatile修飾を付けるこ
とでマルチスレッドに対応できることの説明







4.4)
ゲーム性を高めるために行った実装についての説明
得点ルールとその計算法の実装





得点を表示するために行った実装






課題3で表示される図形を利用するための実装






ゲームの終了条件を定めるための実装






4.5)
更なるゲーム性の向上のための追加実装についての説明









工夫した点や感想：

